import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient
from datetime import datetime
from bson import ObjectId
from dotenv import load_dotenv
from celery import Celery
from datetime import datetime, timedelta
import asyncio
import nest_asyncio
from celery.result import AsyncResult
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
celery_app =Celery('bot', broker='amqp://guest:guest@localhost:5672//')


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = "mongodb://localhost:27017"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=TOKEN)
dp = Dispatcher()
client = MongoClient(MONGO_URI)
db = client["task_manager"]
tasks_collection = db["tasks"]
user_states_collection = db["user_states"]
nest_asyncio.apply()


async def send_async_notification(user_id, text):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@celery_app.task(name='bot.send_notification')
def send_notification(user_id, text):
    """Celery-–∑–∞–¥–∞—á–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        asyncio.run(send_async_notification(user_id, text))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_notification: {e}")




def schedule_notification(user_id, text, deadline):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
    notify_time = deadline - timedelta(hours=1)
    delay = (notify_time - datetime.now()).total_seconds()

    if delay > 0:
        task = send_notification.apply_async((user_id, text), countdown=delay)
        return task.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ –ë–î
    return None

def revoke_notification(task_id):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID.
    """
    celery_app.control.revoke(task_id, terminate=True)
    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞")
from bson import ObjectId




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="show_tasks")],
        [InlineKeyboardButton(text="‚úè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="manage_tasks")]
    ])
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
async def clear_chat(message: Message, skipThisMessage: 1):
    chat_id = message.chat.id
    try:
        for i in range(message.message_id - skipThisMessage, message.message_id - 100, -1):  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await bot.delete_message(chat_id, i)
            except Exception:
                break
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")

# –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clear_state(user_id: id):
    if user_states_collection.find_one({"user_id": user_id}):
        user_states_collection.delete_one({"user_id": user_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start_command(message: Message):
    await clear_state(message.from_user.id)
    await clear_chat(message, 0)
    await main_menu(message.chat.id)

# –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á
@dp.callback_query(F.data == "show_tasks")
async def show_tasks(callback: CallbackQuery):
    await clear_state(callback.from_user.id)
    await clear_chat(callback.message, 0)
    tasks = list(tasks_collection.find({"user_id": callback.from_user.id}))
    if not tasks:
        await bot.send_message(callback.message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        now = datetime.now()
        for task in tasks:
            remaining = (task['deadline'] - now).total_seconds()
            status = "‚úÖ" if task.get("completed") else "‚ùå"
            time_left = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining // 3600)} —á {int((remaining % 3600) // 60)} –º" if remaining > 0 else "üî• –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!"
            response += f"{status} {task['text']} ({time_left})\n"
        
        await bot.send_message(callback.message.chat.id, response)
    await main_menu(callback.message.chat.id)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
@dp.callback_query(F.data == "manage_tasks")
async def manage_tasks(callback: CallbackQuery):
    await clear_chat(callback.message, 0)
    tasks = list(tasks_collection.find({"user_id": callback.from_user.id}))
    task_buttons = [[InlineKeyboardButton(text=task["text"], callback_data=f"edit_{task['_id']}")] for task in tasks]
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        *task_buttons,
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_tasks")]
    ])
    
    await bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –®–∞–≥ 1: –í–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
@dp.callback_query(F.data == "add_task")
async def add_task(callback: CallbackQuery):
    user_states_collection.update_one({"user_id": callback.from_user.id}, {"$set": {"state": "waiting_for_deadline"}}, upsert=True)
    await bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:")

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def process_message(message: Message):
    user_id = message.from_user.id
    user_state = user_states_collection.find_one({"user_id": user_id})

    if not user_state:
        await main_menu(message.chat.id)
        return

    state = user_state.get("state")

    if state == "waiting_for_deadline":
        try:
            deadline = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
            if deadline < datetime.now():
                await message.answer("‚ö† –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            user_states_collection.update_one({"user_id": user_id},
                                              {"$set": {"state": "waiting_for_text", "deadline": deadline}},
                                              upsert=True)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        except ValueError:
            await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")

    elif state == "waiting_for_text":
        task = {
            "user_id": user_id,
            "text": message.text,
            "deadline": user_state["deadline"],
            "completed": False
        }
        tasks_collection.insert_one(task)
        task_id = task["_id"]

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        celery_task_id = schedule_notification(user_id, message.text, user_state["deadline"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è celery_task_id
        tasks_collection.update_one(
            {"_id": task_id},
            {"$set": {"celery_task_id": celery_task_id}}
        )

        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        user_states_collection.delete_one({"user_id": user_id})

    elif state == "waiting_for_new_text":
        task_id = user_state.get("task_changing_id")
        tasks_collection.update_one({"_id": ObjectId(task_id)}, {"$set": {"text": message.text}})
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        user_states_collection.delete_one({"user_id": user_id})
        await clear_chat(message, 0)
        await main_menu(message.chat.id)

    elif state == "waiting_for_new_deadline":
        task_id = user_state.get("task_changing_id")
        try:
            new_deadline = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
            if new_deadline < datetime.now():
                await message.answer("‚ö† –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            tasks_collection.update_one({"_id": ObjectId(task_id)}, {"$set": {"deadline": new_deadline}})
            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            task_record = tasks_collection.find_one({"_id": ObjectId(task_id)})
            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É Celery
            old_celery_task_id = task_record.get("celery_task_id")
            revoke_notification(old_celery_task_id)

            # –ü–µ—Ä–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            new_celery_task_id = schedule_notification(user_id, task_record["text"], new_deadline)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            tasks_collection.update_one(
                {"_id": ObjectId(task_id)},
                {
                    "$set": {
                        "deadline": new_deadline,
                        "celery_task_id": new_celery_task_id
                    }
                }
            )
            await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            user_states_collection.delete_one({"user_id": user_id})
            await clear_chat(message, 0)
            await main_menu(message.chat.id)
        except ValueError:
            await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")



# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π
@dp.callback_query(F.data.startswith("edit_"))
async def edit_task(callback: CallbackQuery):
    task_id = callback.data.split("_")[1]
    task = tasks_collection.find_one({"_id": ObjectId(task_id)})
    if not task:
        await callback.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    await clear_state(callback.from_user.id)
    await clear_chat(callback.message, 1)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", callback_data=f"complete_{task_id}")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"change_text_{task_id}")],
        [InlineKeyboardButton(text="‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"change_time_{task_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"remove_task_{task_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tasks")]
    ])
    
    await bot.send_message(callback.message.chat.id, f"üìå {task['text']}\nüïí –î–µ–¥–ª–∞–π–Ω: {task['deadline']}", reply_markup=markup)

# –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
@dp.callback_query(F.data.startswith("complete_"))
async def complete_task(callback: CallbackQuery):
    task_id = callback.data.split("_")[1]
    tasks_collection.update_one({"_id": ObjectId(task_id)}, {"$set": {"completed": True}})
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.", show_alert=True)
    await manage_tasks(callback)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.callback_query(F.data.startswith("remove_task_"))
async def remove_task(callback: CallbackQuery):
    task_id = callback.data.split("_")[2]
    task_record = tasks_collection.find_one({"_id": ObjectId(task_id)})
    celery_task_id = task_record.get("celery_task_id")
    revoke_notification(celery_task_id)
    tasks_collection.delete_one({"_id": ObjectId(task_id)})
    await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    await manage_tasks(callback)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
@dp.callback_query(F.data.startswith("change_text_"))
async def change_text(callback: CallbackQuery):
    task_id = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id
    task = tasks_collection.find_one({"_id": ObjectId(task_id)})
    if not task:
        await callback.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    user_states_collection.update_one({"user_id": callback.from_user.id}, {"$set": {"state": "waiting_for_new_text", "task_changing_id": task_id}}, upsert=True)
    await callback.message.edit_text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: {task['text']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏
@dp.callback_query(F.data.startswith("change_time_"))
async def change_time(callback: CallbackQuery):
    task_id = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id
    task = tasks_collection.find_one({"_id": ObjectId(task_id)})
    if not task:
        await callback.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    user_states_collection.update_one({"user_id": callback.from_user.id}, {"$set": {"state": "waiting_for_new_deadline", "task_changing_id": task_id}}, upsert=True)
    await callback.message.edit_text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ —Å {task['deadline']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')