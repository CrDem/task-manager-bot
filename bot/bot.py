import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from pymongo import MongoClient
from datetime import datetime
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
MONGO_URI = "mongodb://localhost:27017"

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
client = MongoClient(MONGO_URI)
db = client["task_manager"]
tasks_collection = db["tasks"]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(lambda message: message.text == "/start")
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /add_task, /tasks, /edit_task, /delete_task")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text.startswith("/add_task"))
async def add_task(message: Message):
    try:
        parts = message.text.split("|", 2)
        if len(parts) != 3:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ split")

        _, task_text, deadline = map(str.strip, parts)
        deadline = datetime.strptime(deadline, "%Y-%m-%d %H:%M")

        task = {
            "user_id": message.from_user.id,
            "text": task_text,
            "deadline": deadline,
            "completed": False
        }

        tasks_collection.insert_one(task)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüìå {task_text}\nüïí –î–µ–¥–ª–∞–π–Ω: {deadline}")
    except ValueError as e:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_task | —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ | –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        print(f"[–û—à–∏–±–∫–∞ Exception] {e}")

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "/tasks")
async def list_tasks(message: Message):
    tasks = list(tasks_collection.find({"user_id": message.from_user.id}))
    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    now = datetime.now()
    for task in tasks:
        remaining = (task['deadline'] - now).total_seconds()
        status = "‚úÖ" if task.get("completed") else "‚ùå"
        time_left = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining // 3600)} —á {int((remaining % 3600) // 60)} –º" if remaining > 0 else "üî• –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!"
        response += f"{status} {task['text']} ({time_left})\n"
    
    await message.answer(response)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text.startswith("/delete_task"))
async def delete_task(message: Message):
    try:
        _, task_text = message.text.split(" ", 1)
        result = tasks_collection.delete_one({"user_id": message.from_user.id, "text": task_text.strip()})
        if result.deleted_count:
            await message.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /delete_task —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')